
--- Start of C:/Users/kavim/Downloads/login\.htaccess ---
Options -Indexes

--- End of C:/Users/kavim/Downloads/login\.htaccess ---


--- Start of C:/Users/kavim/Downloads/login\index.php ---
<?php
require 'includes/session.php';
if (is_logged_in()) {
    header("Location: user/dashboard.php");
} else {
    header("Location: auth/login.php");
}
exit;
?>
--- End of C:/Users/kavim/Downloads/login\index.php ---


--- Start of C:/Users/kavim/Downloads/login\assets\css\style.css ---
/* Add your styles here */
--- End of C:/Users/kavim/Downloads/login\assets\css\style.css ---


--- Start of C:/Users/kavim/Downloads/login\auth\login.php ---
<?php
require '../config/db.php';
require '../includes/session.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $stmt = $pdo->prepare("SELECT user_id, password_hash FROM users WHERE username = ? AND is_active = 1");
    $stmt->execute([$username]);
    $user = $stmt->fetch();

    if ($user && password_verify($password, $user['password_hash'])) {
        $_SESSION['user_id'] = $user['user_id'];

        // Log the login action
        $log = $pdo->prepare("INSERT INTO user_logs (user_id, action_type, status) VALUES (?, 'login', 'success')");
        $log->execute([$user['user_id']]);

        header("Location: ../user/dashboard.php");
        exit;
    } else {
        echo "Invalid credentials or inactive account.";
    }
}
?>
<form method="post">
    Username: <input type="text" name="username" required><br>
    Password: <input type="password" name="password" required><br>
    <input type="submit" value="Login">
</form>
<p>Don't have an account? <a href="register.php">Register here ðŸ‘‹</a></p>

--- End of C:/Users/kavim/Downloads/login\auth\login.php ---


--- Start of C:/Users/kavim/Downloads/login\auth\logout.php ---
<?php
require '../config/db.php';
require '../includes/session.php';

if (is_logged_in()) {
    $user_id = $_SESSION['user_id'];

    // Log the logout
    $log = $pdo->prepare("INSERT INTO user_logs (user_id, action_type, status) VALUES (?, 'logout', 'success')");
    $log->execute([$user_id]);
}

session_unset();
session_destroy();

header("Location: login.php");
exit;

--- End of C:/Users/kavim/Downloads/login\auth\logout.php ---


--- Start of C:/Users/kavim/Downloads/login\auth\register.php ---
<?php
require '../config/db.php';
require '../includes/session.php';
require '../includes/functions.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = sanitize_input($_POST['username']);
    $password = password_hash($_POST['password'], PASSWORD_BCRYPT);
    $email = sanitize_input($_POST['email']);
    $full_name = sanitize_input($_POST['full_name']);

    $stmt = $pdo->prepare("INSERT INTO users (username, password_hash, email, full_name) VALUES (?, ?, ?, ?)");
    try {
        $stmt->execute([$username, $password, $email, $full_name]);
        echo "Registration successful. <a href='login.php'>Login</a>";
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
    }
}
?>
<form method="post">
    Full Name: <input type="text" name="full_name" required><br>
    Email: <input type="email" name="email" required><br>
    Username: <input type="text" name="username" required><br>
    Password: <input type="password" name="password" required><br>
    <input type="submit" value="Register">
</form>
--- End of C:/Users/kavim/Downloads/login\auth\register.php ---


--- Start of C:/Users/kavim/Downloads/login\config\db.php ---
<?php
$host = 'localhost';
$db = 'login';
$user = 'root';
$pass = 'KA28';
$charset = 'utf8mb4';

$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
$options = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];

try {
    $pdo = new PDO($dsn, $user, $pass, $options);
} catch (PDOException $e) {
    die("DB Error: " . $e->getMessage());
}
?>

--- End of C:/Users/kavim/Downloads/login\config\db.php ---


--- Start of C:/Users/kavim/Downloads/login\includes\functions.php ---
<?php
// --- File: includes/functions.php ---
function sanitize_input($data) {
    return htmlspecialchars(trim($data), ENT_QUOTES, 'UTF-8');
}

function log_action($pdo, $user_id, $type, $status, $details = []) {
    $stmt = $pdo->prepare("INSERT INTO user_logs (user_id, action_type, status, action_details) VALUES (?, ?, ?, ?)");
    $stmt->execute([$user_id, $type, $status, json_encode($details)]);
}
?>

--- End of C:/Users/kavim/Downloads/login\includes\functions.php ---


--- Start of C:/Users/kavim/Downloads/login\includes\session.php ---
<?php
session_start();

function is_logged_in() {
    return isset($_SESSION['user_id']);
}
?>

--- End of C:/Users/kavim/Downloads/login\includes\session.php ---


--- Start of C:/Users/kavim/Downloads/login\sql\login.sql ---
DROP DATABASE IF EXISTS login;

CREATE DATABASE login;

USE login;

-- Main user table (3NF compliant)
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE,
    full_name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    CONSTRAINT chk_email CHECK (email LIKE '%@%.%')
);

-- User profile information (separated for better normalization)
CREATE TABLE user_profiles (
    profile_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL UNIQUE,
    date_of_birth DATE,
    phone_number VARCHAR(20),
    address TEXT,
    profile_picture VARCHAR(255),
    bio TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT chk_phone_number CHECK (phone_number REGEXP '^[0-9]{10,15}$')
);

-- Enhanced user logs with more detailed tracking
CREATE TABLE user_logs (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    action_type ENUM('login', 'logout', 'password_change', 'account_update', 'profile_update', 'login_failure') NOT NULL,
    action_details JSON, -- Stores additional context about the action
    ip_address VARCHAR(45),
    user_agent TEXT,
    device_id VARCHAR(255),
    location VARCHAR(100),
    status ENUM('success', 'failure', 'pending') NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Session management with better security
CREATE TABLE active_sessions (
    session_id VARCHAR(128) PRIMARY KEY,
    user_id INT NOT NULL,
    session_token VARCHAR(255) NOT NULL,
    refresh_token VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    refresh_expires_at TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    device_info JSON,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    INDEX (session_token),
    INDEX (refresh_token)
);

-- Password history for security (enforces password rotation)
CREATE TABLE password_history (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- User roles and permissions (for authorization)
CREATE TABLE roles (
    role_id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT
);

CREATE TABLE user_roles (
    user_role_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    role_id INT NOT NULL,
    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE CASCADE,
    UNIQUE (user_id, role_id)
);

-- Indexes for better performance
CREATE INDEX idx_active_sessions_user_id ON active_sessions(user_id);
CREATE INDEX idx_user_logs_user_id ON user_logs(user_id);
CREATE INDEX idx_user_logs_timestamp ON user_logs(timestamp);
CREATE INDEX idx_password_history_user_id ON password_history(user_id);
--- End of C:/Users/kavim/Downloads/login\sql\login.sql ---


--- Start of C:/Users/kavim/Downloads/login\status\activity.php ---
<?php
require '../config/db.php';
require '../includes/session.php';

if (!is_logged_in()) {
    header("Location: ../auth/login.php");
    exit;
}

$user_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT action_type, status, timestamp FROM user_logs WHERE user_id = ? ORDER BY timestamp DESC LIMIT 20");
$stmt->execute([$user_id]);
$logs = $stmt->fetchAll();
?>
<h2>Recent Activity Logs</h2>
<table border="1">
<tr><th>Action</th><th>Status</th><th>Time</th></tr>
<?php foreach ($logs as $log): ?>
<tr>
    <td><?= $log['action_type'] ?></td>
    <td><?= $log['status'] ?></td>
    <td><?= $log['timestamp'] ?></td>
</tr>
<?php endforeach; ?>
</table>
echo "<br><a href='../user/dashboard.php'>Back to Dashboard</a>";

--- End of C:/Users/kavim/Downloads/login\status\activity.php ---


--- Start of C:/Users/kavim/Downloads/login\user\dashboard.php ---
<?php
require '../includes/session.php';
if (!is_logged_in()) {
    header("Location: ../auth/login.php");
    exit;
}
echo "Welcome to your dashboard!";
echo "<br><a href='../user/update_profile.php'>Update Profile</a>";
echo "<br><a href='../auth/logout.php'>Logout</a>";
?>
echo "<br><a href='../user/update_password.php'>Change Password</a>";
echo "<br><a href='../status/activity.php'>View Activity</a>";

--- End of C:/Users/kavim/Downloads/login\user\dashboard.php ---


--- Start of C:/Users/kavim/Downloads/login\user\update_password.php ---
<?php
require '../config/db.php';
require '../includes/session.php';
require '../includes/functions.php';

if (!is_logged_in()) {
    header("Location: ../auth/login.php");
    exit;
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $current = $_POST['current'];
    $new = password_hash($_POST['new'], PASSWORD_BCRYPT);
    $user_id = $_SESSION['user_id'];

    $stmt = $pdo->prepare("SELECT password_hash FROM users WHERE user_id = ?");
    $stmt->execute([$user_id]);
    $stored = $stmt->fetch();

    if ($stored && password_verify($current, $stored['password_hash'])) {
        $pdo->prepare("UPDATE users SET password_hash = ? WHERE user_id = ?")->execute([$new, $user_id]);
        $pdo->prepare("INSERT INTO password_history (user_id, password_hash) VALUES (?, ?)")->execute([$user_id, $new]);
        log_action($pdo, $user_id, 'password_change', 'success');
        echo "Password updated successfully.";
    } else {
        echo "Incorrect current password.";
    }
}
?>
<form method="post">
    Current Password: <input type="password" name="current" required><br>
    New Password: <input type="password" name="new" required><br>
    <input type="submit" value="Change Password">
</form>
echo "<br><a href='dashboard.php'>Back to Dashboard</a>";

--- End of C:/Users/kavim/Downloads/login\user\update_password.php ---


--- Start of C:/Users/kavim/Downloads/login\user\update_profile.php ---
<?php
require '../config/db.php';
require '../includes/session.php';
require '../includes/functions.php';

if (!is_logged_in()) {
    header("Location: ../auth/login.php");
    exit;
}

$user_id = $_SESSION['user_id'];

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $email = sanitize_input($_POST['email']);
    $full_name = sanitize_input($_POST['full_name']);

    $stmt = $pdo->prepare("UPDATE users SET email = ?, full_name = ? WHERE user_id = ?");
    $stmt->execute([$email, $full_name, $user_id]);
    log_action($pdo, $user_id, 'account_update', 'success');
    echo "Profile updated.";
}

$stmt = $pdo->prepare("SELECT full_name, email FROM users WHERE user_id = ?");
$stmt->execute([$user_id]);
$user = $stmt->fetch();
?>
<form method="post">
    Full Name: <input type="text" name="full_name" value="<?= $user['full_name'] ?>" required><br>
    Email: <input type="email" name="email" value="<?= $user['email'] ?>" required><br>
    <input type="submit" value="Update Profile">
</form>
--- End of C:/Users/kavim/Downloads/login\user\update_profile.php ---

